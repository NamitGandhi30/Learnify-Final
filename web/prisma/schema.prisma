generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model Profile {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique
  name      String
  imageUrl  String?
  email     String
  role      MemberRole @default(STUDENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
  attempts  Attempt[]
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?      @db.ObjectId
  category    Category?    @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]
  quizzes     Quiz[]
  assignments Assignment[] // Add this line to establish the relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  position      Int
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)
  muxData       MuxData?
  courseId      String         @db.ObjectId
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress  UserProgress[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?
  chapterId  String  @unique @db.ObjectId
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique
  stripeCustomerId  String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Logging {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  method       String
  body         String?
  response     String?
  statusCode   Int?
  errorMessage String?
  createdAt    DateTime @default(now())
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  timeLimit Int
  courseId  String     @db.ObjectId        // New field to associate quiz with a course
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  Attempt[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

enum QuestionType {
  MCQ
  CODING
  LONG_ANSWER
}

model Question {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  quizId        String         @db.ObjectId
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  text          String
  type          QuestionType   // Define the type of question (MCQ, Coding, Long Answer)
  options       String[]     // Array of options for MCQ questions
  correctAnswer Int?           // Correct answer index for MCQ
  codingProblem CodingProblem? // Relation for coding problem questions
  longAnswer    String?        // Long answer for long-answer questions

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model CodingProblem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  questionId     String    @unique @db.ObjectId
  question       Question  @relation(fields: [questionId], references: [id])
  starterCode    String    // Starter code for the coding problem
  expectedOutput String    // Expected output for the problem
}

model Attempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  userId    String
  user      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  score     Int
  startTime DateTime
  endTime   DateTime
  answers   Json     // Store the user's answers in JSON (supports MCQ, coding, long answers)

  @@index([quizId])
  @@index([userId])
}


model Assignment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dueDate     DateTime
  courseId    String      @db.ObjectId
  course      Course      @relation(fields: [courseId], references: [id])
  createdAt   DateTime    @default(now())
  submissions Submission[]

  @@index([courseId])
}

model Submission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  assignmentId String     @db.ObjectId
  studentId    String
  studentName  String
  fileUrl      String
  comments     String?
  submittedAt  DateTime   @default(now())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@index([assignmentId])
  @@index([studentId])
}